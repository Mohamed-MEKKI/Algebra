import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import nj from "numjs"
import React, { useState } from 'react';



function Header({ title }) {
  return <h1>{title ? title : 'Default title'}</h1>;
}

function Matrix({ matrix }) {
  return (
    <table>
      <tbody>
        {matrix.tolist().map((row, i) => (
          <tr key={i}>
            {row.map((col, j) => (
              <td key={j}>{col}</td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default function Home() {
  const [showMult, setShowMult] = useState(false);
  const [showAdd, setShowAdd] = useState(false);
  const [showSub, setShowSub] = useState(false);

  const [matrix1, setMatrix] = useState([[0, 0], [0, 0]]);
  const [matrix2, setMatrix2] = useState([[0, 0], [0, 0]]);

  const handleChange = (e, i, j) => {
    const newMatrix = [...matrix1];
    newMatrix[i][j] = Number(e.target.value);
    setMatrix(newMatrix);
  };

  const handleChange2 = (e, i, j) => {
    const newMatrix = [...matrix2];
    newMatrix[i][j] = Number(e.target.value);
    setMatrix2(newMatrix);
  };

  var addin = nj.add(matrix2, matrix1);
  var multyin = nj.dot(matrix1, matrix2);
  var subin = nj.subtract(matrix1, matrix2);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header title="Calcul matriciel" />
       <div>
        <table>
          <tbody>
          <tr>
            <td>
              matrix A
            </td>
            <td>
            {matrix1.map((row, i) => (
  <div key={i}>
    {row.map((col, j) => (
      <input
        key={`${i}-${j}`} // Use a unique key
        type="number"
        value={col.toString()} // Ensure value is a string
        onChange={(e) => handleChange(e, i, j)}
      />
    ))}
  </div>
))}

            </td>
          </tr>
          <tr>
            <td>
              matrix B
            </td>
            <td>
            {matrix2.map((row, i) => (
  <div key={i}>
    {row.map((col, j) => (
      <input
        key={`${i}-${j}`} // Use a unique key
        type="number"
        value={col.toString()} // Ensure value is a string
        onChange={(e) => handleChange2(e, i, j)}
      />
    ))}
  </div>
))}

            </td>
          </tr>
          </tbody>
        </table>
        </div>
       <div>
        <button onClick={() => setShowMult(!showMult)}>
          Multiply
        </button>
        {showMult && <Matrix matrix={multyin} />}
        </div>
        <div>
        <button onClick={() => setShowAdd(!showAdd)}>
          Add
        </button>
        {showAdd && <Matrix matrix={addin} />}
        </div>
        <div>
        <button onClick={() => setShowSub(!showSub)}>
          Sub
        </button>
        {showSub && <Matrix matrix={subin} />}
        </div>
      </main>
    </>
  )
}



